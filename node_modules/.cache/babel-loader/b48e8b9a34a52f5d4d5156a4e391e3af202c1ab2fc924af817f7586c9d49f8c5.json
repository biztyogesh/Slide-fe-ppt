{"ast":null,"code":"var _jsxFileName = \"E:\\\\BizTecno\\\\slide-fe-service\\\\src\\\\components\\\\Download\\\\SlideDownload.tsx\",\n  _s = $RefreshSig$();\nimport React, { Fragment, useRef, useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getBaseUrl, getToken } from \"store/selectors\";\nimport { modalOperation } from \"store/actions\";\nimport { fetchRequest, getFullUrl } from \"Api\";\nimport { ModalsType } from \"containers/ModalManager/ModalManager\";\nimport { SVGType } from \"components/SvgIcon\";\nimport CustomButton from \"../CustomButton\";\nimport { ICON_POSITION } from \"components/CustomButton/CustomButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SlideDownload = ({\n  urlParams,\n  queryParams,\n  url,\n  fileName,\n  setActiveSlide\n}) => {\n  _s();\n  const downloadRef = useRef(null);\n  const token = useSelector(getToken);\n  const baseUrl = useSelector(getBaseUrl);\n  const [fetching, setFetching] = useState(false);\n  const dispatch = useDispatch();\n  const handleDownloadModal = () => {\n    dispatch(modalOperation.showModal(ModalsType.SlideDownloadModal, {\n      onSave: async data => {\n        setActiveSlide(urlParams.slideId);\n        dispatch(modalOperation.hideModal());\n        if (!fetching) {\n          try {\n            setFetching(true);\n            const response = await fetchRequest(getFullUrl(baseUrl, url, {\n              urlParams,\n              queryParams\n            }), token, \"post\", data);\n            const blob = await response.blob();\n            if (downloadRef.current) {\n              downloadRef.current.href = URL.createObjectURL(blob);\n              downloadRef.current.download = `${fileName}.pptx`;\n              downloadRef.current.click();\n            }\n            setFetching(false);\n          } catch (error) {\n            setFetching(false);\n            toast.error(error.message);\n          }\n        }\n      },\n      onClose: () => {\n        dispatch(modalOperation.hideModal());\n      },\n      title: \"Slide Download\"\n    }));\n  };\n\n  //   const handleDownload = async () => {\n  //     setActiveSlide(urlParams.slideId)\n  //     if (!fetching) {\n  //       try {\n  //         setFetching(true);\n  //         const response = await fetchRequest(getFullUrl(baseUrl, url, { urlParams, queryParams }), token, \"get\");\n  //         const blob = await response.blob();\n\n  //         if (downloadRef.current) {\n  //           downloadRef.current.href = URL.createObjectURL(blob);\n  //           downloadRef.current.download = `${fileName}.pptx`;\n  //           downloadRef.current.click();\n  //         }\n  //         setFetching(false);\n  //       } catch (error: any) {\n  //         setFetching(false);\n  //         toast.error(error.message);\n  //       }\n  //     }\n  //   };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"a\", {\n      ref: downloadRef,\n      className: \"display-none\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CustomButton, {\n      primaryButton: true,\n      type: \"button\",\n      handleClick: handleDownloadModal,\n      iconPosition: ICON_POSITION.RIGHT,\n      iconProps: {\n        name: \"download\",\n        svgType: SVGType.SEMANTIC,\n        size: \"small\",\n        baseclassname: \"text-secondary-color\"\n      },\n      loading: fetching,\n      transparent: true,\n      noOutline: true,\n      baseclassname: \"cursor-pointer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(SlideDownload, \"UqCPEqjyh+5mFUTMkimyAzn/KJE=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n_c = SlideDownload;\nexport default SlideDownload;\nvar _c;\n$RefreshReg$(_c, \"SlideDownload\");","map":{"version":3,"names":["React","Fragment","useRef","useState","toast","useDispatch","useSelector","getBaseUrl","getToken","modalOperation","fetchRequest","getFullUrl","ModalsType","SVGType","CustomButton","ICON_POSITION","jsxDEV","_jsxDEV","SlideDownload","urlParams","queryParams","url","fileName","setActiveSlide","_s","downloadRef","token","baseUrl","fetching","setFetching","dispatch","handleDownloadModal","showModal","SlideDownloadModal","onSave","data","slideId","hideModal","response","blob","current","href","URL","createObjectURL","download","click","error","message","onClose","title","children","ref","className","_jsxFileName","lineNumber","columnNumber","primaryButton","type","handleClick","iconPosition","RIGHT","iconProps","name","svgType","SEMANTIC","size","baseclassname","loading","transparent","noOutline","_c","$RefreshReg$"],"sources":["E:/BizTecno/slide-fe-service/src/components/Download/SlideDownload.tsx"],"sourcesContent":["import React, { Fragment, MutableRefObject, useRef, useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getBaseUrl, getToken } from \"store/selectors\";\nimport { modalOperation } from \"store/actions\";\nimport { fetchRequest, getFullUrl } from \"Api\";\nimport { ModalsType } from \"containers/ModalManager/ModalManager\";\nimport { SVGType } from \"components/SvgIcon\";\nimport CustomButton from \"../CustomButton\";\nimport { ICON_POSITION } from \"components/CustomButton/CustomButton\";\n\nexport interface IDownLoadSvg {\n  fileName?: any;\n  url: string;\n  urlParams: any;\n  queryParams?: any;\n  setActiveSlide?:any;\n}\n\nexport const SlideDownload: React.FC<IDownLoadSvg> = ({ urlParams, queryParams, url ,fileName , setActiveSlide}) => {\n  const downloadRef: MutableRefObject<HTMLAnchorElement> = useRef(null!);\n  const token = useSelector(getToken);\n  const baseUrl = useSelector(getBaseUrl);\n  const [fetching, setFetching] = useState<boolean>(false);\n  const dispatch = useDispatch()\n\n\n  const handleDownloadModal = () => {\n    dispatch(\n      modalOperation.showModal(ModalsType.SlideDownloadModal, {\n        onSave: async(data: any) => {\n          setActiveSlide(urlParams.slideId)\n          dispatch(modalOperation.hideModal());\n              if (!fetching) {\n                try {\n                  setFetching(true);\n                  const response = await fetchRequest(getFullUrl(baseUrl, url, { urlParams, queryParams }), token, \"post\", data);\n                  const blob = await response.blob();\n          \n                  if (downloadRef.current) {\n                    downloadRef.current.href = URL.createObjectURL(blob);\n                    downloadRef.current.download = `${fileName}.pptx`;\n                    downloadRef.current.click();\n                  }\n                  setFetching(false);\n                } catch (error: any) {\n                  setFetching(false);\n                  toast.error(error.message);\n                }\n              }\n          \n        },\n        onClose: () => {\n          dispatch(modalOperation.hideModal());\n        },\n        title: \"Slide Download\",\n      })\n    );\n  };\n\n//   const handleDownload = async () => {\n//     setActiveSlide(urlParams.slideId)\n//     if (!fetching) {\n//       try {\n//         setFetching(true);\n//         const response = await fetchRequest(getFullUrl(baseUrl, url, { urlParams, queryParams }), token, \"get\");\n//         const blob = await response.blob();\n\n//         if (downloadRef.current) {\n//           downloadRef.current.href = URL.createObjectURL(blob);\n//           downloadRef.current.download = `${fileName}.pptx`;\n//           downloadRef.current.click();\n//         }\n//         setFetching(false);\n//       } catch (error: any) {\n//         setFetching(false);\n//         toast.error(error.message);\n//       }\n//     }\n//   };\n\n  return (\n    <Fragment>\n      <a ref={downloadRef} className=\"display-none\" />\n      <CustomButton\n        primaryButton\n        type=\"button\"\n        handleClick={handleDownloadModal}\n        iconPosition={ICON_POSITION.RIGHT}\n        iconProps={{\n          name: \"download\",\n          svgType: SVGType.SEMANTIC,\n          size: \"small\",\n          baseclassname: \"text-secondary-color\",\n        }}\n        loading={fetching}\n        transparent\n        noOutline\n        baseclassname={\"cursor-pointer\"}\n      />\n    </Fragment>\n  );\n};\n\nexport default SlideDownload;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}