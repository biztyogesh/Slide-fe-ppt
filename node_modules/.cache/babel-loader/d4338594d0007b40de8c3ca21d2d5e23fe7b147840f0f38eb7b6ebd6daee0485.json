{"ast":null,"code":"var _jsxFileName = \"E:\\\\BizTecno\\\\slide-fe-service\\\\src\\\\components\\\\FormInputs\\\\HookFormCheckBox.tsx\";\nimport classNames from 'classnames';\nimport { Controller } from 'react-hook-form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function HookFormCheckbox({\n  input,\n  onChange,\n  ...props\n}) {\n  const {\n    label,\n    labelClassName,\n    baseClassName,\n    labelWrapper,\n    name,\n    validation,\n    control,\n    errors,\n    inputClassName,\n    id,\n    triggerOnChange,\n    checkedValue,\n    uncheckedValue\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classNames([\"flex flex-row flex-align-center flex-justify-center\", baseClassName]),\n    children: [label && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classNames([\"text-4 text-bold padding-r-2\", labelClassName]),\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 21\n    }, this), control && /*#__PURE__*/_jsxDEV(Controller, {\n      control: control,\n      name: name,\n      rules: validation || {},\n      render: ({\n        field: {\n          onChange,\n          value,\n          ref\n        }\n      }) => /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        className: inputClassName || '',\n        id: id,\n        onChange: async ({\n          target: {\n            checked\n          }\n        }) => {\n          onChange(checked ? 1 : 0);\n          if (typeof triggerOnChange === \"function\") {\n            triggerOnChange(checked ? checkedValue : uncheckedValue);\n          }\n        },\n        checked: value || false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this), errors[name] && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: errors[name].message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n_c = HookFormCheckbox;\nvar _c;\n$RefreshReg$(_c, \"HookFormCheckbox\");","map":{"version":3,"names":["classNames","Controller","jsxDEV","_jsxDEV","HookFormCheckbox","input","onChange","props","label","labelClassName","baseClassName","labelWrapper","name","validation","control","errors","inputClassName","id","triggerOnChange","checkedValue","uncheckedValue","className","children","fileName","_jsxFileName","lineNumber","columnNumber","rules","render","field","value","ref","type","target","checked","message","_c","$RefreshReg$"],"sources":["E:/BizTecno/slide-fe-service/src/components/FormInputs/HookFormCheckBox.tsx"],"sourcesContent":["import classNames from 'classnames';\nimport { Controller } from 'react-hook-form';\n\nexport function HookFormCheckbox({ input,onChange, ...props }: any) {\n  const {\n    label,\n    labelClassName,\n    baseClassName,\n    labelWrapper,\n    name,\n    validation,\n    control,\n    errors,\n    inputClassName,\n    id,\n    triggerOnChange,\n    checkedValue ,\n    uncheckedValue \n  } = props;\n  \n  return (\n    <div className={classNames([\"flex flex-row flex-align-center flex-justify-center\", baseClassName])}>\n          {label && <div className={classNames([\"text-4 text-bold padding-r-2\", labelClassName])}>{label}</div>}\n      {control && (\n        <Controller\n          control={control}\n          name={name}\n          rules={validation || {}}\n          render={({ field: { onChange, value, ref } }) => (\n            <input\n              type='checkbox'\n              className={inputClassName || ''}\n              id={id}\n              onChange={async ({ target: { checked } }: any) => {\n                onChange(checked ? 1 : 0);\n                if(typeof triggerOnChange === \"function\") {\n                  triggerOnChange(\n                    checked ? checkedValue : uncheckedValue,\n                  );\n                } \n              }}\n             checked={value || false}\n            />\n            )}\n        />\n        )}\n        \n      {errors[name] && <div>{errors[name].message}</div>}\n    </div>\n  );\n}\n"],"mappings":";AAAA,OAAOA,UAAU,MAAM,YAAY;AACnC,SAASC,UAAU,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,OAAO,SAASC,gBAAgBA,CAAC;EAAEC,KAAK;EAACC,QAAQ;EAAE,GAAGC;AAAW,CAAC,EAAE;EAClE,MAAM;IACJC,KAAK;IACLC,cAAc;IACdC,aAAa;IACbC,YAAY;IACZC,IAAI;IACJC,UAAU;IACVC,OAAO;IACPC,MAAM;IACNC,cAAc;IACdC,EAAE;IACFC,eAAe;IACfC,YAAY;IACZC;EACF,CAAC,GAAGb,KAAK;EAET,oBACEJ,OAAA;IAAKkB,SAAS,EAAErB,UAAU,CAAC,CAAC,qDAAqD,EAAEU,aAAa,CAAC,CAAE;IAAAY,QAAA,GAC5Fd,KAAK,iBAAIL,OAAA;MAAKkB,SAAS,EAAErB,UAAU,CAAC,CAAC,8BAA8B,EAAES,cAAc,CAAC,CAAE;MAAAa,QAAA,EAAEd;IAAK;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,EACxGZ,OAAO,iBACNX,OAAA,CAACF,UAAU;MACTa,OAAO,EAAEA,OAAQ;MACjBF,IAAI,EAAEA,IAAK;MACXe,KAAK,EAAEd,UAAU,IAAI,CAAC,CAAE;MACxBe,MAAM,EAAEA,CAAC;QAAEC,KAAK,EAAE;UAAEvB,QAAQ;UAAEwB,KAAK;UAAEC;QAAI;MAAE,CAAC,kBAC1C5B,OAAA;QACE6B,IAAI,EAAC,UAAU;QACfX,SAAS,EAAEL,cAAc,IAAI,EAAG;QAChCC,EAAE,EAAEA,EAAG;QACPX,QAAQ,EAAE,MAAAA,CAAO;UAAE2B,MAAM,EAAE;YAAEC;UAAQ;QAAO,CAAC,KAAK;UAChD5B,QAAQ,CAAC4B,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;UACzB,IAAG,OAAOhB,eAAe,KAAK,UAAU,EAAE;YACxCA,eAAe,CACbgB,OAAO,GAAGf,YAAY,GAAGC,cAC3B,CAAC;UACH;QACF,CAAE;QACHc,OAAO,EAAEJ,KAAK,IAAI;MAAM;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxB;IACC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CACA,EAEFX,MAAM,CAACH,IAAI,CAAC,iBAAIT,OAAA;MAAAmB,QAAA,EAAMP,MAAM,CAACH,IAAI,CAAC,CAACuB;IAAO;MAAAZ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/C,CAAC;AAEV;AAACU,EAAA,GA/CehC,gBAAgB;AAAA,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}