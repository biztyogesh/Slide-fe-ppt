{"ast":null,"code":"import { defaultRextAction } from './defautState';\nexport const infoReducer = (identity, defaultRextInfo) => (info = defaultRextInfo, action = defaultRextAction) => {\n  const {\n    type,\n    payload\n  } = action;\n  switch (type) {\n    case identity.REXT_FETCH.REQUEST:\n    case identity.REXT_UPDATE.REQUEST:\n    case identity.REXT_MULTI_FETCH.REQUEST:\n    case identity.REXT_MULTI_UPDATE_FETCH.REQUEST:\n      return {\n        ...info,\n        params: payload.params,\n        fetching: true,\n        isUpdated: type === identity.REXT_UPDATE.REQUEST || type === identity.REXT_MULTI_UPDATE_FETCH.REQUEST ? true : info.isUpdated,\n        hasError: false,\n        message: undefined\n      };\n    case identity.REXT_FETCH.SUCCESS:\n    case identity.REXT_UPDATE.SUCCESS:\n    case identity.REXT_MULTI_FETCH.SUCCESS:\n    case identity.REXT_MULTI_UPDATE_FETCH.SUCCESS:\n      return {\n        ...info,\n        params: payload.params,\n        fetching: false,\n        isUpdated: type === identity.REXT_UPDATE.SUCCESS || type === identity.REXT_MULTI_UPDATE_FETCH.SUCCESS ? false : info.isUpdated,\n        hasError: false,\n        message: payload.message\n      };\n    case identity.REXT_FETCH.FAILURE:\n    case identity.REXT_UPDATE.FAILURE:\n    case identity.REXT_MULTI_FETCH.FAILURE:\n    case identity.REXT_MULTI_UPDATE_FETCH.FAILURE:\n      return {\n        ...info,\n        params: payload.params,\n        fetching: false,\n        isUpdated: type === identity.REXT_UPDATE.FAILURE || type === identity.REXT_MULTI_UPDATE_FETCH.FAILURE ? false : info.isUpdated,\n        hasError: true,\n        message: payload.message\n      };\n    case identity.RESET_UPDATE_STATE:\n      return {\n        ...info,\n        isUpdated: false\n      };\n    default:\n      return info;\n  }\n};\nexport const itemsReducer = identity => (items = {}, action = defaultRextAction) => {\n  const {\n    type,\n    payload,\n    meta\n  } = action;\n  const {\n    keys\n  } = meta || {};\n  switch (type) {\n    case identity.REXT_FETCH.SUCCESS:\n    case identity.REXT_UPDATE.SUCCESS:\n    case identity.REXT_MULTI_FETCH.SUCCESS:\n      // case identity.REXT_MULTI_UPDATE_FETCH.SUCCESS:\n      return {\n        data: getData(items, payload.items, keys, payload.params)\n      };\n    default:\n      return items;\n  }\n};\nfunction getData(previousData, newData, keys, params) {\n  if (keys.transformation) {\n    if (keys.maintainOldValues) {\n      return keys.transformation(newData, previousData, params);\n    }\n    return keys.transformation(newData);\n  } else {\n    if (keys.maintainOldValues) {\n      return {\n        ...previousData,\n        ...newData\n      };\n    }\n    return newData;\n  }\n}\nexport const resourcesReducer = identity => (resources = {}, action = defaultRextAction) => {\n  const {\n    type,\n    payload\n  } = action;\n  switch (type) {\n    case identity.REXT_FETCH.REQUEST:\n    case identity.REXT_UPDATE.REQUEST:\n    case identity.REXT_MULTI_FETCH.SUCCESS:\n    case identity.REXT_MULTI_UPDATE_FETCH.SUCCESS:\n      {\n        return {\n          ...resources,\n          ...payload.resources\n        };\n      }\n    default:\n      return resources;\n  }\n};","map":{"version":3,"names":["defaultRextAction","infoReducer","identity","defaultRextInfo","info","action","type","payload","REXT_FETCH","REQUEST","REXT_UPDATE","REXT_MULTI_FETCH","REXT_MULTI_UPDATE_FETCH","params","fetching","isUpdated","hasError","message","undefined","SUCCESS","FAILURE","RESET_UPDATE_STATE","itemsReducer","items","meta","keys","data","getData","previousData","newData","transformation","maintainOldValues","resourcesReducer","resources"],"sources":["E:/BizTecno/slide-fe-service/src/store/baseProvider/rext/reducer.ts"],"sourcesContent":["import { defaultRextAction } from './defautState';\nimport {\n  IRextAction,\n  RextResourcesReducer,\n  IRextInfo,\n  IRextKeys,\n  IRextParams,\n  ActionIdentity,\n} from './interface';\n\nexport const infoReducer =\n  (identity: ActionIdentity, defaultRextInfo: IRextInfo) =>\n  (\n    info: IRextInfo = defaultRextInfo,\n    action: IRextAction = defaultRextAction,\n  ) => {\n    const { type, payload } = action;\n    switch (type) {\n      case identity.REXT_FETCH.REQUEST:\n      case identity.REXT_UPDATE.REQUEST:\n      case identity.REXT_MULTI_FETCH.REQUEST:\n      case identity.REXT_MULTI_UPDATE_FETCH.REQUEST:\n        return {\n          ...info,\n          params: payload.params,\n          fetching: true,\n          isUpdated:\n            type === identity.REXT_UPDATE.REQUEST ||\n            type === identity.REXT_MULTI_UPDATE_FETCH.REQUEST\n              ? true\n              : info.isUpdated,\n          hasError: false,\n          message: undefined,\n        };\n      case identity.REXT_FETCH.SUCCESS:\n      case identity.REXT_UPDATE.SUCCESS:\n      case identity.REXT_MULTI_FETCH.SUCCESS:\n      case identity.REXT_MULTI_UPDATE_FETCH.SUCCESS:\n        return {\n          ...info,\n          params: payload.params,\n          fetching: false,\n          isUpdated:\n            type === identity.REXT_UPDATE.SUCCESS ||\n            type === identity.REXT_MULTI_UPDATE_FETCH.SUCCESS\n              ? false\n              : info.isUpdated,\n          hasError: false,\n          message: payload.message,\n        };\n      case identity.REXT_FETCH.FAILURE:\n      case identity.REXT_UPDATE.FAILURE:\n      case identity.REXT_MULTI_FETCH.FAILURE:\n      case identity.REXT_MULTI_UPDATE_FETCH.FAILURE:\n        return {\n          ...info,\n          params: payload.params,\n          fetching: false,\n          isUpdated:\n            type === identity.REXT_UPDATE.FAILURE ||\n            type === identity.REXT_MULTI_UPDATE_FETCH.FAILURE\n              ? false\n              : info.isUpdated,\n          hasError: true,\n          message: payload.message,\n        };\n      case identity.RESET_UPDATE_STATE:\n        return {\n          ...info,\n          isUpdated: false,\n        };\n      default:\n        return info;\n    }\n  };\nexport const itemsReducer =\n  (identity: ActionIdentity) =>\n  (items: {} = {}, action: IRextAction = defaultRextAction) => {\n    const { type, payload, meta } = action;\n    const { keys } = meta || {};\n    switch (type) {\n      case identity.REXT_FETCH.SUCCESS:\n      case identity.REXT_UPDATE.SUCCESS:\n      case identity.REXT_MULTI_FETCH.SUCCESS:\n        // case identity.REXT_MULTI_UPDATE_FETCH.SUCCESS:\n        return {\n          data: getData(items, payload.items, keys, payload.params),\n        };\n      default:\n        return items;\n    }\n  };\n\nfunction getData(\n  previousData: any,\n  newData: any,\n  keys: IRextKeys,\n  params: IRextParams | IRextParams[] | undefined,\n) {\n  if (keys.transformation) {\n    if (keys.maintainOldValues) {\n      return keys.transformation(newData, previousData, params);\n    }\n    return keys.transformation(newData);\n  } else {\n    if (keys.maintainOldValues) {\n      return { ...previousData, ...newData };\n    }\n    return newData;\n  }\n}\nexport const resourcesReducer =\n  (identity: ActionIdentity) =>\n  (\n    resources: RextResourcesReducer = {},\n    action: IRextAction = defaultRextAction,\n  ) => {\n    const { type, payload } = action;\n    switch (type) {\n      case identity.REXT_FETCH.REQUEST:\n      case identity.REXT_UPDATE.REQUEST:\n      case identity.REXT_MULTI_FETCH.SUCCESS:\n      case identity.REXT_MULTI_UPDATE_FETCH.SUCCESS: {\n        return {\n          ...resources,\n          ...payload.resources,\n        };\n      }\n      default:\n        return resources;\n    }\n  };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}