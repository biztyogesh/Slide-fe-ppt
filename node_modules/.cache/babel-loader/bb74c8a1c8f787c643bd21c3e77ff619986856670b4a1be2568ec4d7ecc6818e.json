{"ast":null,"code":"import { put, call, select, takeLatest } from 'redux-saga/effects';\nimport { rextActionFunctions } from './actions';\nimport { fetchRequest, getFullUrl } from 'Api';\nfunction* performRequestRextOperation(action) {\n  const {\n    meta,\n    payload\n  } = action;\n  const {\n    url,\n    method,\n    body,\n    headers\n  } = payload.params;\n  const {\n    keys: {\n      getBaseUrl,\n      getToken\n    }\n  } = meta;\n  try {\n    const token = yield select(getToken);\n    const requesturl = getFullUrl(yield select(getBaseUrl), url, payload.params);\n    const response = yield call(fetchRequest, requesturl, token, method, body, headers);\n    yield put(rextActionFunctions.success(meta, payload.params, response.data || response.record || response, response.message || 'Execution Done Successfully'));\n  } catch (error) {\n    const message = error.message || error.errorText || error;\n    yield put(rextActionFunctions.failure(meta, payload.params, message));\n  }\n}\nfunction* performRequestRextMultiOperation(action) {\n  const {\n    meta,\n    payload\n  } = action;\n  const result = {};\n  try {\n    for (const params of payload.params) {\n      var _response$data;\n      const {\n        url,\n        method,\n        body,\n        headers,\n        multiIdentity\n      } = params;\n      const {\n        keys: {\n          getBaseUrl,\n          getToken\n        }\n      } = meta;\n      const token = yield select(getToken);\n      const requesturl = getFullUrl(yield select(getBaseUrl), url, params);\n      const response = yield call(fetchRequest, requesturl, token, method, body, headers);\n      result[multiIdentity || 'dump'] = ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.result) || response.data || result;\n    }\n    yield put(rextActionFunctions.success(meta, payload.params, result, 'Execution Done Successfully'));\n  } catch (error) {\n    const message = error.message || error.errorText || error;\n    yield put(rextActionFunctions.failure(meta, payload.params, message));\n  }\n}\nexport default function (actionidentity) {\n  return function* watchRextEvent() {\n    yield takeLatest(actionidentity.REXT_FETCH.REQUEST, performRequestRextOperation);\n    yield takeLatest(actionidentity.REXT_UPDATE.REQUEST, performRequestRextOperation);\n    yield takeLatest(actionidentity.REXT_MULTI_FETCH.REQUEST, performRequestRextMultiOperation);\n    yield takeLatest(actionidentity.REXT_MULTI_UPDATE_FETCH.REQUEST, performRequestRextMultiOperation);\n  };\n}","map":{"version":3,"names":["put","call","select","takeLatest","rextActionFunctions","fetchRequest","getFullUrl","performRequestRextOperation","action","meta","payload","url","method","body","headers","params","keys","getBaseUrl","getToken","token","requesturl","response","success","data","record","message","error","errorText","failure","performRequestRextMultiOperation","result","_response$data","multiIdentity","actionidentity","watchRextEvent","REXT_FETCH","REQUEST","REXT_UPDATE","REXT_MULTI_FETCH","REXT_MULTI_UPDATE_FETCH"],"sources":["E:/BizTecno/slide-fe-service/src/store/baseProvider/rext/saga.ts"],"sourcesContent":["import { SagaIterator } from 'redux-saga';\nimport { put, call, select, takeLatest } from 'redux-saga/effects';\nimport { rextActionFunctions } from './actions';\nimport { fetchRequest, getFullUrl } from 'Api';\nimport { IRextAction, ActionIdentity, IRextParams } from './interface';\n\nfunction* performRequestRextOperation(\n  action: IRextAction,\n): IterableIterator<{}> {\n  const { meta, payload } = action;\n  const { url, method, body, headers } = payload.params! as IRextParams;\n  const {\n    keys: { getBaseUrl, getToken },\n  } = meta;\n  try {\n    const token: string = (yield select(getToken))!;\n\n    const requesturl: string = getFullUrl(\n      (yield select(getBaseUrl))!,\n      url,\n      payload.params as IRextParams,\n    );\n    const response: any = yield call(\n      fetchRequest,\n      requesturl,\n      token,\n      method,\n      body,\n      headers,\n    );\n    yield put(\n      rextActionFunctions.success(\n        meta,\n        payload.params!,\n        response.data || response.record || response,\n        response.message || 'Execution Done Successfully',\n      ),\n    );\n  } catch (error: any) {\n    const message = error.message || error.errorText || error;\n    yield put(rextActionFunctions.failure(meta, payload.params!, message));\n  }\n}\n\nfunction* performRequestRextMultiOperation(\n  action: IRextAction,\n): IterableIterator<{}> {\n  const { meta, payload } = action;\n  const result: any = {};\n  try {\n    for (const params of payload.params! as IRextParams[]) {\n      const { url, method, body, headers, multiIdentity } = params;\n      const {\n        keys: { getBaseUrl, getToken },\n      } = meta;\n\n      const token: string = (yield select(getToken))!;\n\n      const requesturl: string = getFullUrl(\n        (yield select(getBaseUrl))!,\n        url,\n        params,\n      );\n      const response: any = yield call(\n        fetchRequest,\n        requesturl,\n        token,\n        method,\n        body,\n        headers,\n      );\n      result[multiIdentity || 'dump'] =\n        response.data?.result || response.data || result;\n    }\n\n    yield put(\n      rextActionFunctions.success(\n        meta,\n        payload.params!,\n        result,\n        'Execution Done Successfully',\n      ),\n    );\n  } catch (error: any) {\n    const message = error.message || error.errorText || error;\n    yield put(rextActionFunctions.failure(meta, payload.params!, message));\n  }\n}\n\nexport default function (actionidentity: ActionIdentity) {\n  return function* watchRextEvent(): SagaIterator {\n    yield takeLatest(\n      actionidentity.REXT_FETCH.REQUEST,\n      performRequestRextOperation,\n    );\n    yield takeLatest(\n      actionidentity.REXT_UPDATE.REQUEST,\n      performRequestRextOperation,\n    );\n    yield takeLatest(\n      actionidentity.REXT_MULTI_FETCH.REQUEST,\n      performRequestRextMultiOperation,\n    );\n    yield takeLatest(\n      actionidentity.REXT_MULTI_UPDATE_FETCH.REQUEST,\n      performRequestRextMultiOperation,\n    );\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}