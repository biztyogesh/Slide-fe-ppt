{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef } from \"react\";\nimport deepEqual from \"deep-equal\";\n\n// Hook\nfunction UsePrevious(value) {\n  _s();\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref = useRef();\n  // Store current value in ref\n  useEffect(() => {\n    if (!deepEqual(ref.current, value)) {\n      ref.current = value;\n    }\n  }, [value]); // Only re-run if value changes\n  // Return previous value (happens before update in useEffect above)\n  return ref.current;\n}\n_s(UsePrevious, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n_c = UsePrevious;\nexport default UsePrevious;\nvar _c;\n$RefreshReg$(_c, \"UsePrevious\");","map":{"version":3,"names":["useEffect","useRef","deepEqual","UsePrevious","value","_s","ref","current","_c","$RefreshReg$"],"sources":["E:/BizTecno/slide-fe-service/src/containers/HOC/UsePrevious.tsx"],"sourcesContent":["import { useEffect, useRef } from \"react\";\nimport deepEqual from \"deep-equal\";\n\n// Hook\nfunction UsePrevious(value: any) {\n    // The ref object is a generic container whose current property is mutable ...\n    // ... and can hold any value, similar to an instance property on a class\n    const ref = useRef();\n    // Store current value in ref\n    useEffect(() => {\n        if(!deepEqual(ref.current, value)) {\n            ref.current = value;\n        }\n    }, [value]); // Only re-run if value changes\n    // Return previous value (happens before update in useEffect above)\n    return ref.current;\n}\n\nexport default UsePrevious;"],"mappings":";AAAA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACzC,OAAOC,SAAS,MAAM,YAAY;;AAElC;AACA,SAASC,WAAWA,CAACC,KAAU,EAAE;EAAAC,EAAA;EAC7B;EACA;EACA,MAAMC,GAAG,GAAGL,MAAM,CAAC,CAAC;EACpB;EACAD,SAAS,CAAC,MAAM;IACZ,IAAG,CAACE,SAAS,CAACI,GAAG,CAACC,OAAO,EAAEH,KAAK,CAAC,EAAE;MAC/BE,GAAG,CAACC,OAAO,GAAGH,KAAK;IACvB;EACJ,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC,CAAC,CAAC;EACb;EACA,OAAOE,GAAG,CAACC,OAAO;AACtB;AAACF,EAAA,CAZQF,WAAW;AAAAK,EAAA,GAAXL,WAAW;AAcpB,eAAeA,WAAW;AAAC,IAAAK,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}